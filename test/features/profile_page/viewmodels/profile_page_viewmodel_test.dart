import 'package:flutter_test/flutter_test.dart';
import 'package:mockito/annotations.dart';
import 'package:mockito/mockito.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:flutter/material.dart';
import 'package:soma/features/profile_page/viewmodels/profile_page_viewmodel.dart';
import 'package:soma/features/landing_page/views/landing_page.dart';

import 'package:http/http.dart' as http;

import 'profile_page_viewmodel_test.mocks.dart'; // Generated by build_runner

@GenerateMocks([SharedPreferences, NavigatorObserver, http.Client])
void main() {
  group('ProfilePageViewModel', () {
    late ProfilePageViewModel viewModel;
    late MockSharedPreferences mockSharedPreferences;
    late MockNavigatorObserver mockNavigatorObserver;

    setUp(() {
      mockSharedPreferences = MockSharedPreferences();
      mockNavigatorObserver = MockNavigatorObserver();

      // Initialize the ViewModel with the mock SharedPreferences
      viewModel = ProfilePageViewModel(prefs: mockSharedPreferences);
    });

    test('logout clears token and navigates to landing page', () async {
      // Arrange
      // Mock the remove method of SharedPreferences
      when(mockSharedPreferences.remove('jwt_token')).thenAnswer((_) async => true);

      // Create a TestWidgetsFlutterBinding to provide a context for navigation
      final TestWidgetsFlutterBinding binding = TestWidgetsFlutterBinding.ensureInitialized();

      // Create a mock Navigator to capture navigation calls
      final mockNavigator = MockNavigator();

      // Create a BuildContext that uses the mock Navigator
      final BuildContext context = TestBuildContext(mockNavigator);

      // Act
      await viewModel.logout(context);

      // Assert
      // Verify that the token was removed
      verify(mockSharedPreferences.remove('jwt_token')).called(1);

      // Verify navigation to LandingPage
      verify(mockNavigator.pushAndRemoveUntil(
        any(
          that: isA<MaterialPageRoute>()
              .having((p) => p.builder(context), 'builder', isA<LandingPage>()),
        ),
        (Route<dynamic> route) => false,
      )).called(1);
    });
  });
}

// Helper class to create a mock BuildContext with a mock Navigator
class TestBuildContext extends Mock implements BuildContext {
  final MockNavigator _mockNavigator;

  TestBuildContext(this._mockNavigator);

  @override
  NavigatorState? findAncestorStateOfType<T extends State>() {
    if (T == NavigatorState) {
      return _mockNavigator as NavigatorState;
    }
    return super.findAncestorStateOfType<T>();
  }
}

// Mock NavigatorState
class MockNavigator extends Mock implements NavigatorState {}