import 'package:flutter_test/flutter_test.dart';import 'package:soma/core/utils/quill_utils.dart';void main() {  group('QuillUtils', () {    test('extractPlainText extracts text correctly from simple Quill JSON', () {      final String quillJson = '[{"insert":"Hello World!\n"}]';      final String expectedText = 'Hello World!';      expect(QuillUtils.extractPlainText(quillJson), expectedText);    });    test('extractPlainText handles multiple inserts', () {      final String quillJson = '[{"insert":"First part"},{"insert":"\n"},{"insert":"Second part"}]';      final String expectedText = 'First part Second part';      expect(QuillUtils.extractPlainText(quillJson), expectedText);    });    test('extractPlainText truncates text if maxLength is exceeded', () {      final String quillJson = '[{"insert":"This is a very long string that should be truncated.\n"}]';      final String expectedText = 'This is a very long string that should be truncated...';      expect(QuillUtils.extractPlainText(quillJson, maxLength: 50), expectedText);    });    test('extractPlainText returns full text if less than maxLength', () {      final String quillJson = '[{"insert":"Short text.\n"}]';      final String expectedText = 'Short text.';      expect(QuillUtils.extractPlainText(quillJson, maxLength: 100), expectedText);    });    test('extractPlainText handles empty Quill JSON', () {      final String quillJson = '[]';      final String expectedText = '';      expect(QuillUtils.extractPlainText(quillJson), expectedText);    });    test('extractPlainText handles invalid Quill JSON', () {      final String invalidJson = 'invalid json';      final String expectedText = 'No Content';      expect(QuillUtils.extractPlainText(invalidJson), expectedText);    });    test('extractPlainText handles Quill JSON with only newlines', () {      final String quillJson = '[{"insert":"\n\n\n"}]';      final String expectedText = '';      expect(QuillUtils.extractPlainText(quillJson), expectedText);    });  });}