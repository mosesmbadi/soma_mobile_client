import 'package:flutter_test/flutter_test.dart';
import 'package:mockito/annotations.dart';
import 'package:mockito/mockito.dart';
import 'package:http/http.dart' as http;
import 'package:soma/data/story_repository.dart';
import 'package:soma/core/config/environment.dart';

import 'story_repository_test.mocks.dart'; // Generated by build_runner

@GenerateMocks([http.Client])
void main() {
  group('StoryRepository', () {
    late StoryRepository storyRepository;
    late MockClient mockClient;

    setUp(() {
      mockClient = MockClient();
      storyRepository = StoryRepository(client: mockClient);
    });

    test('isStoryUnlocked returns true if story ID is in unlocked list', () async {
      // Arrange
      final String storyId = 'story123';
      final String token = 'test_token';
      final String unlockedStoriesJson = '[{"_id": "story123"}, {"_id": "story456"}]';

      when(mockClient.get(
        Uri.parse('${Environment.backendUrl}/api/stories/user/unlocked'),
        headers: anyNamed('headers'),
      )).thenAnswer((_) async => http.Response(unlockedStoriesJson, 200));

      // Act
      final bool isUnlocked = await storyRepository.isStoryUnlocked(storyId, token);

      // Assert
      expect(isUnlocked, true);
      verify(mockClient.get(
        Uri.parse('${Environment.backendUrl}/api/stories/user/unlocked'),
        headers: {
          'Authorization': 'Bearer $token',
          'Content-Type': 'application/json; charset=UTF-8',
        },
      )).called(1);
    });

    test('isStoryUnlocked returns false if story ID is not in unlocked list', () async {
      // Arrange
      final String storyId = 'story789';
      final String token = 'test_token';
      final String unlockedStoriesJson = '[{"_id": "story123"}, {"_id": "story456"}]';

      when(mockClient.get(
        Uri.parse('${Environment.backendUrl}/api/stories/user/unlocked'),
        headers: anyNamed('headers'),
      )).thenAnswer((_) async => http.Response(unlockedStoriesJson, 200));

      // Act
      final bool isUnlocked = await storyRepository.isStoryUnlocked(storyId, token);

      // Assert
      expect(isUnlocked, false);
    });

    test('isStoryUnlocked returns false on API error', () async {
      // Arrange
      final String storyId = 'story123';
      final String token = 'test_token';

      when(mockClient.get(
        Uri.parse('${Environment.backendUrl}/api/stories/user/unlocked'),
        headers: anyNamed('headers'),
      )).thenAnswer((_) async => http.Response('Error', 500));

      // Act
      final bool isUnlocked = await storyRepository.isStoryUnlocked(storyId, token);

      // Assert
      expect(isUnlocked, false);
    });
  });
}
