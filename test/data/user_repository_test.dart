import 'package:flutter_test/flutter_test.dart';
import 'package:mockito/annotations.dart';
import 'package:mockito/mockito.dart';
import 'package:http/http.dart' as http;
import 'package:shared_preferences/shared_preferences.dart';
import 'package:soma/data/user_repository.dart';
import 'package:soma/core/config/environment.dart';

import 'user_repository_test.mocks.dart'; // Generated by build_runner

@GenerateMocks([http.Client, SharedPreferences])
void main() {
  group('UserRepository', () {
    late UserRepository userRepository;
    late MockClient mockClient;
    late MockSharedPreferences mockSharedPreferences;

    setUp(() {
      mockClient = MockClient();
      mockSharedPreferences = MockSharedPreferences();
      userRepository = UserRepository(client: mockClient, prefs: mockSharedPreferences);
    });

    group('getCurrentUserDetails', () {
      test('returns user details on successful API call', () async {
        // Arrange
        final String token = 'test_token';
        final Map<String, dynamic> userData = {'_id': 'user123', 'name': 'Test User'};
        when(mockSharedPreferences.getString('jwt_token')).thenReturn(token);
        when(mockClient.get(
          Uri.parse('${Environment.backendUrl}/api/auth/me'),
          headers: anyNamed('headers'),
        )).thenAnswer((_) async => http.Response(jsonEncode(userData), 200));

        // Act
        final result = await userRepository.getCurrentUserDetails();

        // Assert
        expect(result, userData);
        verify(mockClient.get(
          Uri.parse('${Environment.backendUrl}/api/auth/me'),
          headers: {
            'Authorization': 'Bearer $token',
            'Content-Type': 'application/json; charset=UTF-8',
          },
        )).called(1);
      });

      test('throws exception if no token found', () async {
        // Arrange
        when(mockSharedPreferences.getString('jwt_token')).thenReturn(null);

        // Act & Assert
        expect(() => userRepository.getCurrentUserDetails(), throwsA(isA<Exception>()));
      });

      test('throws exception on API error', () async {
        // Arrange
        final String token = 'test_token';
        when(mockSharedPreferences.getString('jwt_token')).thenReturn(token);
        when(mockClient.get(
          Uri.parse('${Environment.backendUrl}/api/auth/me'),
          headers: anyNamed('headers'),
        )).thenAnswer((_) async => http.Response('Error', 500));

        // Act & Assert
        expect(() => userRepository.getCurrentUserDetails(), throwsA(isA<Exception>()));
      });
    });

    group('fetchRecentReads', () {
      test('returns list of recent reads on successful API call', () async {
        // Arrange
        final String token = 'test_token';
        final List<Map<String, dynamic>> recentReadsData = [
          {'_id': 'story1', 'title': 'Story One'},
          {'_id': 'story2', 'title': 'Story Two'},
        ];
        when(mockClient.get(
          Uri.parse('${Environment.backendUrl}/api/stories/user/unlocked'),
          headers: anyNamed('headers'),
        )).thenAnswer((_) async => http.Response(jsonEncode(recentReadsData), 200));

        // Act
        final result = await userRepository.fetchRecentReads(token);

        // Assert
        expect(result, recentReadsData);
        verify(mockClient.get(
          Uri.parse('${Environment.backendUrl}/api/stories/user/unlocked'),
          headers: {
            'Authorization': 'Bearer $token',
            'Content-Type': 'application/json; charset=UTF-8',
          },
        )).called(1);
      });

      test('throws exception on API error', () async {
        // Arrange
        final String token = 'test_token';
        when(mockClient.get(
          Uri.parse('${Environment.backendUrl}/api/stories/user/unlocked'),
          headers: anyNamed('headers'),
        )).thenAnswer((_) async => http.Response('Error', 500));

        // Act & Assert
        expect(() => userRepository.fetchRecentReads(token), throwsA(isA<Exception>()));
      });
    });
  });
}
